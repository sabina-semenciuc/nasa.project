{"cells":[{"cell_type":"markdown","metadata":{"id":"G0DRI0cwU9Gr"},"source":["#B. Exploratory Data Analysis"]},{"cell_type":"markdown","metadata":{"id":"AJCdTmyoU9Gs"},"source":["Now we will do some exploratory data analysis to look for patterns in the data and determine what values we should use to make predictions in the future.\n","\n","We will see if we can predict the probability of success based on certain categories."]},{"cell_type":"markdown","metadata":{"id":"VmRlrhLBU9Gu"},"source":["## Objectives\n","\n","To perform an exploratory analysis of the data and obtain our first conclusions."]},{"cell_type":"markdown","metadata":{"id":"ouw8RjKzU9Gv"},"source":["***\n"]},{"cell_type":"markdown","metadata":{"id":"TZUKk1dDU9Gv"},"source":["## Import of libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"bhtXX151U9Gw","executionInfo":{"status":"ok","timestamp":1680799397079,"user_tz":-180,"elapsed":579,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"outputs":[],"source":["#importing the libraries we need\n","import pandas as pd\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"aLiB_ERLU9Gx"},"source":["## Data analysis."]},{"cell_type":"markdown","metadata":{"id":"jYNox-qgU9Gx"},"source":["We are gonna upload the `.csv` file generated in the previous practice, but we must first upload the file to google collab."]},{"cell_type":"code","execution_count":2,"metadata":{"id":"-25Z6VHBU9Gx","executionInfo":{"status":"ok","timestamp":1680799397080,"user_tz":-180,"elapsed":25,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"outputs":[],"source":["df=pd.read_csv(\"/content/dataset_part_1.csv\")"]},{"cell_type":"markdown","metadata":{"id":"FDM0avN-U9G0"},"source":["### Part 1: Calculate the number of releases on each platform.\n","\n","The data contains different platforms such as:\n","\n","* Cape Canaveral Launch Complex (VAFB SLC 4E).\n","* Vanderberg Air Force Base (SLC-4E)\n","* The Kennedy Launch Center (KSC LC 39A).\n","Let's see which one is more popular:"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CwXeGBEjU9G0","executionInfo":{"status":"ok","timestamp":1680799397081,"user_tz":-180,"elapsed":24,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"db250a4c-9e35-4c44-abff-ff0a1b50a891"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["CCSFS SLC 40    93\n","KSC LC 39A      49\n","VAFB SLC 4E     26\n","Name: LaunchSite, dtype: int64"]},"metadata":{},"execution_count":3}],"source":["#Using the `value_counts()` method in the `LaunchSite` column determines the number of launches on each platform.\n","df['LaunchSite'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"sSMruMkZU9G2"},"source":["### Part 2: Calculate the number of launches for each orbit."]},{"cell_type":"markdown","metadata":{"id":"TJBImnnZU9G1"},"source":["Each launch targets a different orbit, these are the most common ones:"]},{"cell_type":"markdown","metadata":{"id":"d46mxyGPU9G2"},"source":["![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/Orbits.png)\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RvSnO_C3U9G3","executionInfo":{"status":"ok","timestamp":1680799397082,"user_tz":-180,"elapsed":22,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"dec49e25-a1ab-4fac-c63d-f4cc5bdd399f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["VLEO     54\n","ISS      32\n","GTO      31\n","LEO      14\n","PO       13\n","SSO      11\n","MEO       5\n","GEO       2\n","TLI       2\n","ES-L1     1\n","HEO       1\n","SO        1\n","Name: Orbit, dtype: int64"]},"metadata":{},"execution_count":4}],"source":["#Using the `value_counts()` method in the `Orbit` column determines the number of launches in each orbit.\n","df['Orbit'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"4RL0SONCU9G4"},"source":["### Part 3: Calculate the number of different landing results, distinguish successful from unsuccessful ones."]},{"cell_type":"code","source":["#Using the `value_counts()` method on the `LandingOutcome` column determines the number of launches in each orbit. It assigns the result to the variable `landing_outcomes`.\n","df[['LandingOutcome','Orbit']].groupby('Orbit').value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"exG1uFQcsChL","executionInfo":{"status":"ok","timestamp":1680799397083,"user_tz":-180,"elapsed":19,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"602cce82-05a6-4d92-e3c2-d08f8105fe75"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Orbit  LandingOutcome\n","ES-L1  True Ocean         1\n","GEO    True ASDS          2\n","GTO    True ASDS         17\n","       None None         11\n","       True Ocean         1\n","       False ASDS         1\n","       None ASDS          1\n","HEO    True ASDS          1\n","ISS    True ASDS         16\n","       True RTLS          7\n","       None None          3\n","       False ASDS         2\n","       None ASDS          1\n","       False Ocean        1\n","       True Ocean         1\n","       False RTLS         1\n","LEO    True RTLS          7\n","       True ASDS          4\n","       None None          2\n","       True Ocean         1\n","MEO    True ASDS          4\n","       None None          1\n","PO     True ASDS          8\n","       True RTLS          1\n","       True Ocean         1\n","       False ASDS         1\n","       None None          1\n","       False Ocean        1\n","SO     None None          1\n","SSO    True RTLS          7\n","       True ASDS          4\n","TLI    True ASDS          2\n","VLEO   True ASDS         51\n","       False ASDS         3\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["landing_outcomes = df['LandingOutcome'].value_counts() #counting values by the categories in the 'LandingOutcome' column\n","landing_outcomes #displaying the series"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCHi7SwrrqAx","executionInfo":{"status":"ok","timestamp":1680799397084,"user_tz":-180,"elapsed":17,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"c196f3c0-7f39-4a5c-d952-776783069bf0"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True ASDS      109\n","True RTLS       23\n","None None       19\n","False ASDS       7\n","True Ocean       5\n","False Ocean      2\n","None ASDS        2\n","False RTLS       1\n","Name: LandingOutcome, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"zymTL7YzU9G5"},"source":["Note that the `LandingOutcome` variable is separated into 2 parts. \n","\n","The first takes values `True`, `False` and `None`. \n","* True` implies that the rocket landed successfully.\n","* False` implies that the rocket did not land successfully.\n","* None` implies that the rocket did not initiate the landing.\n","\n","The second part takes `ASDS`,`Ocean`, `RTLS` and `None` values.\n","* `ASDS` implies that the rocket was intended to land on an aircraft carrier.\n","* Ocean` implies that the rocket was intended to land in the ocean.\n","* RTLS` implies that the rocket was intended to land on a land platform.\n","* None` implies that the rocket did not intend to land."]},{"cell_type":"markdown","source":["Let's try to see what result each rocket has had in the different orbits.\n","\n","We gonna create a dataframe named `df2` with only the columns `'Orbit','LandingOutcome'`. We gonna apply to this dataframe a grouping by `'Orbit','LandingOutcome'` using `df2.groupby([Columns])` and add the `.size()` attribute to see the number of results in each category."],"metadata":{"id":"ifqlaCOPJ0d4"}},{"cell_type":"code","source":["df2 = df[['Orbit','LandingOutcome']] #creatinf the df2 that contains only the 2 columns\n","df2.groupby(['Orbit','LandingOutcome']).value_counts() #grouping the df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lS9pJJ-HsjOy","executionInfo":{"status":"ok","timestamp":1680799397700,"user_tz":-180,"elapsed":631,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"68efb392-eb18-4cba-dd0c-f83a506d2961"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Orbit  LandingOutcome\n","ES-L1  True Ocean         1\n","GEO    True ASDS          2\n","GTO    False ASDS         1\n","       None ASDS          1\n","       None None         11\n","       True ASDS         17\n","       True Ocean         1\n","HEO    True ASDS          1\n","ISS    False ASDS         2\n","       False Ocean        1\n","       False RTLS         1\n","       None ASDS          1\n","       None None          3\n","       True ASDS         16\n","       True Ocean         1\n","       True RTLS          7\n","LEO    None None          2\n","       True ASDS          4\n","       True Ocean         1\n","       True RTLS          7\n","MEO    None None          1\n","       True ASDS          4\n","PO     False ASDS         1\n","       False Ocean        1\n","       None None          1\n","       True ASDS          8\n","       True Ocean         1\n","       True RTLS          1\n","SO     None None          1\n","SSO    True ASDS          4\n","       True RTLS          7\n","TLI    True ASDS          2\n","VLEO   False ASDS         3\n","       True ASDS         51\n","dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"11sY67yiU9G6"},"source":["In the result of the previous exercise we can observe the different results for each orbit, which despite being detailed are confusing. Let's see how to solve this."]},{"cell_type":"markdown","metadata":{"id":"k1BYTqheU9G7"},"source":["### Part 4: Create a Class column using LandingOutcome"]},{"cell_type":"markdown","source":["Previously we have saved in `landing_outcomes` the count of the different landings:"],"metadata":{"id":"Du7r84vgK5Gk"}},{"cell_type":"code","source":["print(landing_outcomes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5FpetNaKLS8A","executionInfo":{"status":"ok","timestamp":1680799397702,"user_tz":-180,"elapsed":71,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"814c447d-e77d-4f31-9307-52ef5218a6b1"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["True ASDS      109\n","True RTLS       23\n","None None       19\n","False ASDS       7\n","True Ocean       5\n","False Ocean      2\n","None ASDS        2\n","False RTLS       1\n","Name: LandingOutcome, dtype: int64\n"]}]},{"cell_type":"markdown","source":["The above variable is a dictionary, from which we will create a set with the different cases where the rocket did not land successfully. "],"metadata":{"id":"IQwJyv5LLTVd"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"3-ubBsAkU9G7","executionInfo":{"status":"ok","timestamp":1680799397703,"user_tz":-180,"elapsed":59,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"outputs":[],"source":["#creating the set\n","bad_outcomes = {'False ASDS', 'False Ocean', 'False RTLS', 'None ASDS', 'None None'}"]},{"cell_type":"markdown","metadata":{"id":"VJRwqwGtU9G7"},"source":["Let us now create a list called `landing_class` which will take values 0 and 1 depending on whether the result is successful or not.\n","* Runs for each cell the `LandingOutcome` column.\n","* Checks if the value belongs to the `bad_outcomes` set. If it does, it appends a 0 to the `landing_class` list, if not, it appends a 1.* * *Check if the value belongs to the `bad_outcomes` set."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"BZZfTfyqU9G8","executionInfo":{"status":"ok","timestamp":1680799397703,"user_tz":-180,"elapsed":57,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"outputs":[],"source":["#creating the empty list landing_class\n","landing_class =[]"]},{"cell_type":"code","source":["for item in df['LandingOutcome']:\n","  if item in bad_outcomes:\n","    landing_class.append(0)\n","  else:\n","    landing_class.append(1)"],"metadata":{"id":"cj6_Kj13YxOi","executionInfo":{"status":"ok","timestamp":1680799397704,"user_tz":-180,"elapsed":57,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QvCHRlmOU9G8"},"source":["We gonna add this list to the dataframe as a column with name `Class`"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"gt6RfUyAU9G9","executionInfo":{"status":"ok","timestamp":1680799397705,"user_tz":-180,"elapsed":56,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"outputs":[],"source":["#creating a new column with the list\n","df['Class'] = landing_class"]},{"cell_type":"markdown","source":["### Part 5: Using the Class column."],"metadata":{"id":"VsYRs2T8TttS"}},{"cell_type":"markdown","metadata":{"id":"GjV0E4MPU9G9"},"source":["We calculate the average of the `class` column. "]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mcATJqK5U9G-","executionInfo":{"status":"ok","timestamp":1680799397706,"user_tz":-180,"elapsed":55,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"6e601501-999c-4159-bad0-ad03a1865df4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8154761904761905"]},"metadata":{},"execution_count":13}],"source":["df['Class'].mean()"]},{"cell_type":"markdown","source":["As before, we can group the launches by orbit.\n","\n","We create a df3 where we include the `Orbit` and `Class` columns, group by `Orbit` and calculate the average."],"metadata":{"id":"8tytioV_RNyD"}},{"cell_type":"code","source":["df3 = df[['Orbit','Class']] #creating the df3 from df ['Orbit','Class'] columns\n","df3 = df3.groupby('Orbit').mean() #grouping\n","df3 #checking the df3 "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"Ty0zg9ZARkFC","executionInfo":{"status":"ok","timestamp":1680799397708,"user_tz":-180,"elapsed":51,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"ccaab80a-cef5-49c5-b8f3-f55b2a8f72df"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Class\n","Orbit          \n","ES-L1  1.000000\n","GEO    1.000000\n","GTO    0.580645\n","HEO    1.000000\n","ISS    0.750000\n","LEO    0.857143\n","MEO    0.800000\n","PO     0.769231\n","SO     0.000000\n","SSO    1.000000\n","TLI    1.000000\n","VLEO   0.944444"],"text/html":["\n","  <div id=\"df-a50b325e-c2ae-4c31-ac61-cee686cc0b2c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Class</th>\n","    </tr>\n","    <tr>\n","      <th>Orbit</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>ES-L1</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>GEO</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>GTO</th>\n","      <td>0.580645</td>\n","    </tr>\n","    <tr>\n","      <th>HEO</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>ISS</th>\n","      <td>0.750000</td>\n","    </tr>\n","    <tr>\n","      <th>LEO</th>\n","      <td>0.857143</td>\n","    </tr>\n","    <tr>\n","      <th>MEO</th>\n","      <td>0.800000</td>\n","    </tr>\n","    <tr>\n","      <th>PO</th>\n","      <td>0.769231</td>\n","    </tr>\n","    <tr>\n","      <th>SO</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>SSO</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>TLI</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>VLEO</th>\n","      <td>0.944444</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a50b325e-c2ae-4c31-ac61-cee686cc0b2c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a50b325e-c2ae-4c31-ac61-cee686cc0b2c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a50b325e-c2ae-4c31-ac61-cee686cc0b2c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["Let's note that more than one orbit has a probability of success 1. So if we launch a rocket into those orbits 100% will it land correctly?"],"metadata":{"id":"QebgZKMiRw49"}},{"cell_type":"markdown","source":["Let's show now the number of successful and unsuccessful launches in each orbit. \n","\n","We do this by applying on df3 a `groupby()` method where we group by `Orbit` and `Class` columns and then by applying the `size()` method to perform the count."],"metadata":{"id":"bOXkndJqSbLS"}},{"cell_type":"code","source":["df3.groupby(['Orbit','Class']).value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iOkhi3QgSxav","executionInfo":{"status":"ok","timestamp":1680799397708,"user_tz":-180,"elapsed":46,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"ffc68a32-922f-45d6-9e83-e6bb68d46bbe"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Orbit  Class   \n","ES-L1  1.000000    1\n","GEO    1.000000    1\n","GTO    0.580645    1\n","HEO    1.000000    1\n","ISS    0.750000    1\n","LEO    0.857143    1\n","MEO    0.800000    1\n","PO     0.769231    1\n","SO     0.000000    1\n","SSO    1.000000    1\n","TLI    1.000000    1\n","VLEO   0.944444    1\n","dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["We can observe that some of our orbits have only one successful launch (others have only one unsuccessful launch). In these cases the sample is too small to ensure the probability of success based on the orbit alone. Therefore, this does not seem to be the best predictor of the probability of success."],"metadata":{"id":"Emr34v6GS1Nr"}},{"cell_type":"markdown","source":["Let's return to the variables analyzed above as the LaunchSite.\n","*Create df4 with the columns `Class` and `LaunchSite`. Apply a groupby and calculate the probability of success for each platform. Observe the total number of successes and failures on each platform. Reason if it would be a better predictor than the orbit."],"metadata":{"id":"Q5mGUg1sT3JK"}},{"cell_type":"code","source":["df4 = df[['LaunchSite', 'Class']] #creating the df4 that contains only the ['LaunchSite', 'Class'] columns\n","df4=df4.groupby('LaunchSite').mean() #grouping by LaunchSite\n","df4 #displaying the df4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"a9ETKieTv2nI","executionInfo":{"status":"ok","timestamp":1680799397710,"user_tz":-180,"elapsed":44,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"81e58695-034b-4f0b-d263-de6cd833ec11"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Class\n","LaunchSite            \n","CCSFS SLC 40  0.752688\n","KSC LC 39A    0.897959\n","VAFB SLC 4E   0.884615"],"text/html":["\n","  <div id=\"df-82ec2e14-653c-4d05-811c-b77b8bd36a85\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Class</th>\n","    </tr>\n","    <tr>\n","      <th>LaunchSite</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>CCSFS SLC 40</th>\n","      <td>0.752688</td>\n","    </tr>\n","    <tr>\n","      <th>KSC LC 39A</th>\n","      <td>0.897959</td>\n","    </tr>\n","    <tr>\n","      <th>VAFB SLC 4E</th>\n","      <td>0.884615</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82ec2e14-653c-4d05-811c-b77b8bd36a85')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-82ec2e14-653c-4d05-811c-b77b8bd36a85 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-82ec2e14-653c-4d05-811c-b77b8bd36a85');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df5 = df[['LaunchSite', 'Class']] #creating the df5\n","df5=df4.groupby(['LaunchSite', 'Class']).size() #checking the size of the grouped df5\n","df5 #displaying the df5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZszL3yw9UQc8","executionInfo":{"status":"ok","timestamp":1680799397711,"user_tz":-180,"elapsed":42,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}},"outputId":"8ca52c4c-80cd-4c71-abd8-c4e4e2d3544d"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LaunchSite    Class   \n","CCSFS SLC 40  0.752688    1\n","KSC LC 39A    0.897959    1\n","VAFB SLC 4E   0.884615    1\n","dtype: int64"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"8UilIp1yU9G-"},"source":["Now we export the data in a file that we download for the next practice."]},{"cell_type":"code","source":["#downloading the file\n","df.to_csv('dataset_part_2.csv', index=False)"],"metadata":{"id":"1uth3da5cbpW","executionInfo":{"status":"ok","timestamp":1680799406883,"user_tz":-180,"elapsed":7,"user":{"displayName":"Sabina Semenciuc","userId":"13387653145414226236"}}},"execution_count":19,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3.10.6 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.6"},"vscode":{"interpreter":{"hash":"aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"}},"colab":{"provenance":[{"file_id":"1TM4RZ3jSAmvoPc4KsUDbZF-Z5X4uOtKw","timestamp":1680795692290},{"file_id":"1r6O2OwyaTBj--ow8OlNC81XLIyiukfiH","timestamp":1679745591209}]}},"nbformat":4,"nbformat_minor":0}